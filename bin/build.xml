<!DOCTYPE project>
<project>
	<property name="cvs.base" value=".." />
	<property name="dir.base" location=".." />

	<property name="build.properties" value="build.properties" />
	<property file="${dir.base}/${build.properties}" />

	<property name="url" value="http://localhost/joomla-1.7.3-inst" />
	<property name="login" value="admin" />
	<property name="password" value="sonne80" />
	<property name="ftplogin" value="" />
	<property name="ftppassword" value="" />
	<property name="debug" value="false" />
	<property name="source" value="deploy/h2n_linkdirectory2-u-HEAD.zip" />
	<property name="name" value="Link Directotry 2.0" />
	<property name="type" value="" />
	<property name="build" value="${dir.base}/build" />

	<taskdef name="joomla-install-extension" classname="com.joomboss.InstallExtensionTask" />
	<taskdef name="joomla-remove-extension" classname="com.joomboss.RemoveExtensionTask" />

	<echo message="Nutze Konfiguration [${dir.base}/${build.properties}]" />

	<!-- ================================= -->
	<!-- = deploy                        = -->
	<!-- ================================= -->
	<target name="deploy">
		<echo>Login auf [${url}] mit Login [${login}]</echo>
		<joomla-install-extension source="${dir.base}/${source}" url="${url}" adminlogin="${login}" adminpassword="${password}" ftplogin="${ftplogin}" ftppassword="${ftppassword}" debug="${debug}" />
	</target>

	<!-- ================================= -->
	<!-- = undeploy                      = -->
	<!-- ================================= -->
	<target name="undeploy">
		<joomla-remove-extension name="${name}" type="${type}" url="${url}" adminLogin="${login}" adminPassword="${password}" ftpLogin="${ftplogin}" ftpPassword="${ftppassword}" debug="${debug}" />
	</target>

	<!-- ================================= -->
	<!-- = copy2outgoing                 = -->
	<!-- ================================= -->
	<target name="copy2outgoing" description="Kopiert alle Artefakt nach outgoing">
		<mkdir dir="${user.home}/outgoing" />
		<copy todir="${user.home}/outgoing" overwrite="true" verbose="true">
			<fileset dir="${dir.base}/deploy">
				<include name="*.zip" />
			</fileset>
		</copy>
	</target>

	<!-- ================================= -->
	<!-- = createUpdateXml               = -->
	<!-- ================================= -->
	<target name="createUpdateXml" description="Erzeugt das File für die Update-Configuration">
		<property name="update-filename" value="mosimage-update" />

		<mkdir dir="${build}" />
		<copy todir="${build}" overwrite="true">
			<fileset dir="${dir.base}">
				<include name="${update-filename}.xml" />
			</fileset>
		</copy>

		<echo message="Version: ${VERSION}" />

		<!-- Version entsprechend der Version setzen -->
		<replaceregexp match="HEAD" replace="${VERSION}">
			<fileset dir="${build}">
				<include name="${update-filename}.xml" />
			</fileset>
		</replaceregexp>

		<!-- ersetzen von tag in Abhänigkeit der Version -->
		<replaceregexp match="TAG" replace="TAG-${VERSION}">
			<fileset dir="${build}">
				<include name="${update-filename}.xml" />
			</fileset>
		</replaceregexp>

		<concat destfile="${build}/filename.tmp">update_filename_tag=mosimage-update-TAG-${VERSION}</concat>

		<!-- * Name des Updatefile-Namen ermitteln (mit -rc, -beta oder ohne, Teil 1 -->
		<!-- * TAG im ...-update.xml ersetzen                                        -->
		<replaceregexp match="TAG-[0-9\.]*rc[0-9]" replace="rc">
			<fileset dir="${build}">
				<include name="${update-filename}.xml" />
				<include name="filename.tmp" />
			</fileset>
		</replaceregexp>
		<replaceregexp match="TAG-[0-9\.]*b[0-9]" replace="beta">
			<fileset dir="${build}">
				<include name="${update-filename}.xml" />
				<include name="filename.tmp" />
			</fileset>
		</replaceregexp>
		<replaceregexp match="TAG-[0-9\.]*" replace="stable">
			<fileset dir="${build}">
				<include name="${update-filename}.xml" />
				<include name="filename.tmp" />
			</fileset>
		</replaceregexp>

		<!-- name des Updatefile-Namen ermitteln (mit -rc, -beta oder ohne, Teil 2 -->
		<property file="${build}/filename.tmp" />

		<!-- Updatefile auf Server kopieren -->
		<move file="${build}/${update-filename}.xml" tofile="${dir.base}/deploy/${update_filename_tag}.xml" overwrite="true" verbose="true" />
		<scp verbose="true" todir="www.neschke.de@ssh.strato.de:joomla-demo/joomla3/upload" keyfile="${user.home}/.ssh/id_rsa.deploy">
			<fileset dir="${dir.base}/deploy">
				<include name="${update_filename_tag}.xml" />
			</fileset>
		</scp>

	</target>

	<!-- ================================= -->
	<!-- = copy2demohost                 = -->
	<!-- ================================= -->
	<target name="copy2demohost" description="Kopiert alle artefakts auf den Demo-Host">
		<scp verbose="true" todir="www.neschke.de@ssh.strato.de:joomla-demo/joomla3/upload" keyfile="${user.home}/.ssh/id_rsa.deploy">
			<fileset dir="${dir.base}/deploy">
				<include name="*.zip" />
			</fileset>
		</scp>
	</target>

	<!-- ================================= -->
	<!-- = tag                           = -->
	<!-- ================================= -->
	<target name="tag" description="Tagt die Source-Dateinen">

		<property name="before" value="This is a value" />
		<script language="javascript">
		    var before = project.getProperty("VERSION");
		    project.setProperty("CVS_TAG", before.replaceAll("\\.", "-"));
		</script>

		<echo message="CVS Tag: [${CVS_TAG}]" />
		<cvs>
			<commandline>
				<argument value="tag" />
				<argument value="-F" />
				<argument value="v${CVS_TAG}" />
				<argument value="${cvs.base}" />
			</commandline>
		</cvs>
	</target>

</project>
